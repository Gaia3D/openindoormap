<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.openindoormap.persistence.UserMapper">

    <!-- 사용자 정보 -->
    <select id="getUser" parameterType="string" resultType="userInfo">
        /* getUser */
        SELECT A.*,
               B.user_group_name
        FROM user_info A, user_group B
        WHERE A.user_id = #{userId}
              AND A.user_group_id = B.user_group_id
    </select>

    <!-- 사용자 기본 정보 중 비밀번호 정보 수정 -->
    <update id="updatePassword" parameterType="userInfo">
        /* updatePassword */
        UPDATE user_info
        SET password = #{password},
            update_date = NOW(),
            last_password_change_date = NOW(),
            <if test="dbStatus != null and dbStatus == '2'.toString()">
            fail_login_count = 0,
            </if>
            <if test="dbStatus != null and dbStatus == '3'.toString()">
            last_login_date = NOW(),
            </if>
            status = #{status}
        WHERE user_id = #{userId}
    </update>

    <insert id="insertUser" parameterType="userInfo">
         /* insertUser */
        INSERT INTO public.user_info(user_id,
                               user_group_id,
                               user_name,
                               password,
                               last_signin_date,
                               update_date)
        VALUES (#{userId},          -- user_id
                #{userGroupId},     -- user_group_id
                #{userName},        -- user_name
                #{password},        -- password
                now(),              -- last_signin_date
                now())              -- update_date
    </insert>

    <!-- 세션 정보 -->
    <select id="getUserSession" parameterType="userInfo" resultType="userSession">
        /* getUserSession */
        SELECT A.*,
               B.user_group_name AS userGroupName,
            <![CDATA[
            CASE WHEN A.last_password_change_date < (NOW() - INTERVAL '${passwordChangeTerm} DAY') THEN true
                ELSE false
            END AS password_change_term_over,
            ]]>
            <![CDATA[
            CASE WHEN A.last_signin_date IS NULL THEN A.insert_date < (NOW() - INTERVAL '${userLastSigninLock} DAY')
                ELSE A.last_signin_date < (NOW() - INTERVAL '${userLastSigninLock} DAY')
            END AS user_last_signin_lock_over
            ]]>
        FROM user_info A LEFT OUTER JOIN user_group B ON A.user_group_id = B.user_group_id
        WHERE A.user_id = #{userId}
    </select>

    <!-- 사용자 기본 정보 중 세션 관련 정보 수정 -->
    <update id="updateSigninUserSession" parameterType="userSession">
        /* updateSigninUserSession */
        UPDATE user_info
        SET
        <if test="status != null and status != ''">
            status = #{status},
            update_date = NOW(),
        </if>
        <if test="failSigninCount != null and failSigninCount gte 0">
            fail_signin_count = fail_signin_count + 1,
        </if>
            last_signin_date = NOW()
        WHERE user_id = #{userId}
    </update>

    <delete id="deleteUser" parameterType="string">
        /* deleteUser */
        delete user_info
        where user_id = #{userId}
    </delete>

</mapper>